[
  {
    "id": "story-1760910750220-30du21bi3",
    "title": "Test Story",
    "content": "Das ist eine Test-Story über Edelsteine",
    "gemstone": "diamond",
    "author": "Test Autor",
    "status": "draft",
    "imageUrl": "",
    "createdAt": "2025-10-19T21:52:30.220Z",
    "updatedAt": "2025-10-19T21:52:30.220Z"
  },
  {
    "id": "story-1760910828329-jx1j6nf27",
    "title": "test",
    "content": "askdjölasdkölkaSÖD",
    "gemstone": "diamond",
    "author": "ego",
    "status": "published",
    "imageUrl": "",
    "createdAt": "2025-10-19T21:53:48.329Z",
    "updatedAt": "2025-10-19T22:01:25.607Z"
  },
  {
    "id": "story-1760914025983-412g2vzh5",
    "title": "sautest",
    "content": "# 📧 E-Mail-Konfiguration für Kontaktformular und Bestellbestätigungen\r\n\r\n**Status:** ✅ Bereit für Konfiguration  \r\n**Datum:** 07. Oktober 2025  \r\n**Version:** 1.0\r\n\r\n---\r\n\r\n## 🎯 Übersicht\r\n\r\nDas E-Mail-System verwendet **eine gemeinsame Konfiguration** für:\r\n- ✅ **Kontaktformular** - Bereits funktional\r\n- ✅ **Bestellbestätigungen** - Neu implementiert\r\n- ✅ **Newsletter** - Bereits implementiert\r\n\r\n**Beide Systeme verwenden die gleichen SMTP-Einstellungen!**\r\n\r\n---\r\n\r\n## 🔧 Konfiguration einrichten\r\n\r\n### **1. .env.local Datei bearbeiten**\r\n\r\nÖffnen Sie die Datei `.env.local` in Ihrem Projektverzeichnis und fügen Sie die SMTP-Konfiguration hinzu:\r\n\r\n```env\r\n# Server Configuration\r\nHOSTNAME=0.0.0.0\r\nPORT=3000\r\n\r\n# NextAuth Configuration\r\nNEXTAUTH_URL=http://localhost:3000\r\nNEXTAUTH_SECRET=your-secret-key-here-change-in-production\r\n\r\n# Database\r\nDATABASE_URL=\"file:./dev.db\"\r\n\r\n# E-Mail Konfiguration (für Kontaktformular, Newsletter, Bestellbestätigungen)\r\n# Diese Konfiguration wird sowohl für das Kontaktformular als auch für Bestellbestätigungen verwendet\r\nSMTP_HOST=smtp.gmail.com\r\nSMTP_PORT=587\r\nSMTP_SECURE=false\r\nSMTP_USER=ihre-email@gemilike.de\r\nSMTP_PASSWORD=ihr-app-passwort\r\nSMTP_FROM=noreply@gemilike.de\r\n\r\n# Analytics (optional)\r\nNEXT_PUBLIC_GA_ID=your-google-analytics-id\r\n```\r\n\r\n### **2. SMTP-Daten anpassen**\r\n\r\nErsetzen Sie die folgenden Werte mit Ihren tatsächlichen Daten:\r\n\r\n```env\r\nSMTP_USER=ihre-email@gemilike.de          # Ihre E-Mail-Adresse\r\nSMTP_PASSWORD=ihr-app-passwort            # Ihr App-Passwort\r\nSMTP_FROM=noreply@gemilike.de             # Absender-E-Mail (optional)\r\n```\r\n\r\n---\r\n\r\n## 📧 E-Mail-Provider Setup\r\n\r\n### **Gmail (Empfohlen)**\r\n\r\n1. **Google-Konto vorbereiten:**\r\n   - 2-Faktor-Authentifizierung aktivieren\r\n   - App-Passwort erstellen\r\n\r\n2. **Konfiguration:**\r\n   ```env\r\n   SMTP_HOST=smtp.gmail.com\r\n   SMTP_PORT=587\r\n   SMTP_SECURE=false\r\n   SMTP_USER=ihre-email@gmail.com\r\n   SMTP_PASSWORD=ihr-16-stelliges-app-passwort\r\n   ```\r\n\r\n### **Strato (Deutschland)**\r\n\r\n1. **Strato-E-Mail-Passwort verwenden:**\r\n   - NICHT das Kundencenter-Passwort\r\n   - Das E-Mail-Passwort für info@gemilike.com\r\n\r\n2. **Konfiguration:**\r\n   ```env\r\n   SMTP_HOST=smtp.strato.de\r\n   SMTP_PORT=587\r\n   SMTP_SECURE=false\r\n   SMTP_USER=info@gemilike.com\r\n   SMTP_PASSWORD=ihr-strato-email-passwort\r\n   ```\r\n\r\n### **Outlook/Hotmail**\r\n\r\n```env\r\nSMTP_HOST=smtp-mail.outlook.com\r\nSMTP_PORT=587\r\nSMTP_SECURE=false\r\nSMTP_USER=ihre-email@outlook.com\r\nSMTP_PASSWORD=ihr-passwort\r\n```\r\n\r\n---\r\n\r\n## 🧪 Testing\r\n\r\n### **1. Kontaktformular testen**\r\n\r\n```bash\r\n# Kontaktformular-API testen\r\ncurl -X POST http://localhost:3001/api/contact \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\r\n    \"name\": \"Test User\",\r\n    \"email\": \"test@example.com\",\r\n    \"subject\": \"Test Nachricht\",\r\n    \"message\": \"Dies ist eine Test-Nachricht\",\r\n    \"locale\": \"de\"\r\n  }'\r\n```\r\n\r\n### **2. Bestellbestätigung testen**\r\n\r\n```bash\r\n# Bestellbestätigungs-API testen\r\ncurl -X POST http://localhost:3001/api/orders/confirmation \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\r\n    \"orderNumber\": \"ORD-001\",\r\n    \"customerEmail\": \"kunde@example.com\",\r\n    \"customerName\": \"Max Mustermann\",\r\n    \"orderDate\": \"2025-10-07\",\r\n    \"totalAmount\": 1250.00,\r\n    \"currency\": \"EUR\",\r\n    \"items\": [\r\n      {\r\n        \"name\": \"Kolumbianischer Smaragd\",\r\n        \"quantity\": 1,\r\n        \"price\": 1250.00\r\n      }\r\n    ],\r\n    \"locale\": \"de\"\r\n  }'\r\n```\r\n\r\n### **3. Test-Scripts ausführen**\r\n\r\n```bash\r\n# E-Mail-System testen\r\nnode test-order-confirmation.js\r\n\r\n# API-Route testen\r\nnode test-order-api.js\r\n```\r\n\r\n---\r\n\r\n## 🔄 Gemeinsame Konfiguration\r\n\r\n### **Warum eine gemeinsame Konfiguration?**\r\n\r\n- ✅ **Konsistenz** - Gleiche E-Mail-Einstellungen für alle Features\r\n- ✅ **Wartung** - Einfacher zu verwalten und zu aktualisieren\r\n- ✅ **Sicherheit** - Zentrale SMTP-Konfiguration\r\n- ✅ **Performance** - Gemeinsame Verbindungspools\r\n\r\n### **Verwendete Umgebungsvariablen:**\r\n\r\n```env\r\nSMTP_HOST          # SMTP-Server (z.B. smtp.gmail.com)\r\nSMTP_PORT          # SMTP-Port (z.B. 587)\r\nSMTP_SECURE        # SSL/TLS (true/false)\r\nSMTP_USER          # E-Mail-Benutzername\r\nSMTP_PASSWORD      # E-Mail-Passwort/App-Passwort\r\nSMTP_FROM          # Absender-E-Mail (optional)\r\n```\r\n\r\n### **Verwendete Bibliothek:**\r\n\r\nBeide Systeme verwenden die gleiche `lib/email.ts` Bibliothek:\r\n- ✅ **Kontaktformular** - `sendEmail()` Funktion\r\n- ✅ **Bestellbestätigungen** - `sendEmail()` Funktion\r\n- ✅ **Newsletter** - `sendEmail()` Funktion\r\n\r\n---\r\n\r\n## 📊 Status nach Konfiguration\r\n\r\n### **Kontaktformular:**\r\n- ✅ **Funktional** - Bereits implementiert und getestet\r\n- ✅ **E-Mail-Versand** - Funktioniert mit SMTP-Konfiguration\r\n- ✅ **Templates** - Professionelle HTML-Templates\r\n- ✅ **Validierung** - Vollständige Eingabevalidierung\r\n\r\n### **Bestellbestätigungen:**\r\n- ✅ **Funktional** - Neu implementiert\r\n- ✅ **E-Mail-Versand** - Funktioniert mit gleicher SMTP-Konfiguration\r\n- ✅ **Templates** - Professionelle HTML-Templates (DE/EN)\r\n- ✅ **Admin-Benachrichtigungen** - Automatische Benachrichtigungen\r\n- ✅ **Validierung** - Vollständige Datenvalidierung\r\n\r\n---\r\n\r\n## 🚀 Nächste Schritte\r\n\r\n### **1. SMTP-Konfiguration hinzufügen:**\r\n```bash\r\n# .env.local Datei bearbeiten\r\nnano .env.local\r\n\r\n# Oder mit VS Code\r\ncode .env.local\r\n```\r\n\r\n### **2. E-Mail-System testen:**\r\n```bash\r\n# Test-Scripts ausführen\r\nnode test-order-confirmation.js\r\nnode test-order-api.js\r\n```\r\n\r\n### **3. Kontaktformular testen:**\r\n- Gehen Sie zu `/de/contact`\r\n- Füllen Sie das Formular aus\r\n- Überprüfen Sie, ob die E-Mail ankommt\r\n\r\n### **4. Bestellbestätigung testen:**\r\n- Verwenden Sie die API-Route\r\n- Oder integrieren Sie sie in den Checkout-Prozess\r\n\r\n---\r\n\r\n## 🔒 Sicherheit\r\n\r\n### **Implementierte Sicherheitsmaßnahmen:**\r\n- ✅ **E-Mail-Validierung** - RFC 5322 Format\r\n- ✅ **Datenvalidierung** - Alle Pflichtfelder\r\n- ✅ **Input-Sanitization** - XSS-Schutz\r\n- ✅ **SMTP-Authentifizierung** - Sichere Verbindung\r\n- ✅ **Error Handling** - Keine sensiblen Daten in Logs\r\n\r\n### **Empfohlene zusätzliche Maßnahmen:**\r\n- **Rate Limiting** - Pro IP-Adresse\r\n- **CAPTCHA** - Für Formulare\r\n- **Spam-Filter** - E-Mail-Content-Filterung\r\n- **Monitoring** - E-Mail-Versand überwachen\r\n\r\n---\r\n\r\n## 📞 Support\r\n\r\n### **Bei Problemen:**\r\n1. **Logs überprüfen** - Console-Ausgabe\r\n2. **SMTP-Test** - Verbindung testen\r\n3. **Template-Test** - HTML-Validierung\r\n4. **Provider-Support** - Gmail/Outlook-Hilfe\r\n\r\n### **Häufige Probleme:**\r\n\r\n**E-Mails werden nicht versendet:**\r\n- SMTP-Konfiguration überprüfen\r\n- App-Passwort bei Gmail erneuern\r\n- Firewall-Einstellungen prüfen\r\n\r\n**Templates werden nicht korrekt angezeigt:**\r\n- HTML-Validierung durchführen\r\n- CSS-Inline-Styling überprüfen\r\n- E-Mail-Client-Kompatibilität testen\r\n\r\n---\r\n\r\n## ✅ Checkliste\r\n\r\n- [ ] `.env.local` Datei geöffnet\r\n- [ ] SMTP-Konfiguration hinzugefügt\r\n- [ ] E-Mail-Daten angepasst\r\n- [ ] `node test-order-confirmation.js` ausgeführt\r\n- [ ] Test-E-Mails empfangen\r\n- [ ] Kontaktformular getestet\r\n- [ ] Bestellbestätigung getestet\r\n- [ ] Admin-Benachrichtigungen getestet\r\n\r\n---\r\n\r\n**Letzte Aktualisierung:** 07. Oktober 2025  \r\n**Status:** ✅ Bereit für Konfiguration  \r\n**Nächster Schritt:** SMTP-Daten in `.env.local` eintragen\r\n\r\n---\r\n\r\n*Das E-Mail-System verwendet eine gemeinsame Konfiguration für Kontaktformular und Bestellbestätigungen. Nach der SMTP-Konfiguration funktionieren beide Systeme sofort.*\r\n",
    "gemstone": "general",
    "author": "ego",
    "status": "draft",
    "imageUrl": "",
    "createdAt": "2025-10-19T22:47:05.983Z",
    "updatedAt": "2025-10-19T22:47:05.983Z"
  },
  {
    "id": "story-1760914814183-nzjss8nnt",
    "title": "yyyyy",
    "content": "# Deployment-Anleitung für Strato\r\n\r\n**Version:** 1.2.0  \r\n**Datum:** 03. Oktober 2025  \r\n**Status:** ✅ Vollständig funktionsfähig mit Admin-Panel\r\n\r\n## Voraussetzungen\r\n\r\n- FTP-Zugang zu Ihrem Strato-Hosting\r\n- Domain `gemilike.de` und/oder `gemilike.com` bei Strato registriert\r\n- Node.js lokal installiert (für Build-Prozess)\r\n- **Wichtig:** Admin-Panel funktioniert nur mit Node.js Hosting (nicht mit Static Export)\r\n\r\n## Schritt-für-Schritt Anleitung\r\n\r\n### 1. Projekt vorbereiten\r\n\r\n```bash\r\n# In das Projektverzeichnis wechseln\r\ncd /home/cip050669/CascadeProjects/gemilike-website\r\n\r\n# Dependencies installieren (falls noch nicht geschehen)\r\nnpm install\r\n```\r\n\r\n### 2. Deployment-Option wählen\r\n\r\n#### Option A: Static Export (ohne Admin-Panel)\r\nFür einfache Websites ohne Admin-Panel:\r\n\r\n```typescript\r\nconst nextConfig: NextConfig = {\r\n  output: 'export',\r\n  images: {\r\n    unoptimized: true, // Wichtig für static export\r\n  },\r\n};\r\n```\r\n\r\n#### Option B: Node.js Hosting (mit Admin-Panel) - EMPFOHLEN\r\nFür vollständige Funktionalität mit Admin-Panel:\r\n\r\n```typescript\r\nconst nextConfig: NextConfig = {\r\n  // Keine output: 'export' - Standard Next.js\r\n  images: {\r\n    domains: ['your-domain.com'],\r\n  },\r\n};\r\n```\r\n\r\n### 3. Build erstellen\r\n\r\n#### Für Static Export:\r\n```bash\r\nnpm run build\r\n```\r\nDies erstellt einen `out/` Ordner mit allen statischen Dateien.\r\n\r\n#### Für Node.js Hosting:\r\n```bash\r\nnpm run build\r\n```\r\nDies erstellt einen `.next/` Ordner für die Produktion.\r\n\r\n### 4. Deployment zu Strato\r\n\r\n#### Option A: Static Export (FTP-Upload)\r\n\r\n**FTP-Upload für Static Export:**\r\n\r\n1. FileZilla herunterladen und installieren\r\n2. FTP-Verbindung einrichten:\r\n   - Host: `ftp.strato.de` oder Ihre spezifische FTP-Adresse\r\n   - Benutzername: Ihr Strato FTP-Benutzername\r\n   - Passwort: Ihr FTP-Passwort\r\n   - Port: 21\r\n\r\n3. Verbinden und navigieren Sie zu Ihrem Web-Verzeichnis (meist `/` oder `/html/`)\r\n\r\n4. Laden Sie den **gesamten Inhalt** des `out/` Ordners hoch (nicht den Ordner selbst!)\r\n\r\n#### Option B: Node.js Hosting (mit Admin-Panel) - EMPFOHLEN\r\n\r\n**Vollständige Projekt-Upload:**\r\n\r\n1. **Alle Projektdateien** via FTP/SFTP hochladen (außer `node_modules/`)\r\n2. **Auf dem Server:**\r\n   ```bash\r\n   npm install --production\r\n   npm start\r\n   ```\r\n\r\n3. **PM2 für Prozess-Management** (empfohlen):\r\n   ```bash\r\n   npm install -g pm2\r\n   pm2 start npm --name \"gemilike\" -- start\r\n   pm2 save\r\n   pm2 startup\r\n   ```\r\n\r\n**Wichtige Dateien für Node.js Hosting:**\r\n- `package.json` ✅\r\n- `next.config.ts` ✅\r\n- `app/` Ordner ✅\r\n- `components/` Ordner ✅\r\n- `lib/` Ordner ✅\r\n- `public/` Ordner ✅\r\n- `messages/` Ordner ✅\r\n- `.env.local` (Umgebungsvariablen) ✅\r\n\r\n### 5. .htaccess für URL-Routing erstellen\r\n\r\nErstellen Sie eine `.htaccess` Datei im Root-Verzeichnis auf dem Server:\r\n\r\n```apache\r\n# Aktiviere Rewrite Engine\r\nRewriteEngine On\r\n\r\n# HTTPS erzwingen\r\nRewriteCond %{HTTPS} off\r\nRewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]\r\n\r\n# Entferne .html Endungen\r\nRewriteCond %{REQUEST_FILENAME} !-f\r\nRewriteCond %{REQUEST_FILENAME} !-d\r\nRewriteCond %{REQUEST_FILENAME}.html -f\r\nRewriteRule ^(.+)$ $1.html [L,QSA]\r\n\r\n# Fallback für SPA-Routing\r\nRewriteCond %{REQUEST_FILENAME} !-f\r\nRewriteCond %{REQUEST_FILENAME} !-d\r\nRewriteRule ^(.*)$ /index.html [L,QSA]\r\n\r\n# Kompression aktivieren\r\n<IfModule mod_deflate.c>\r\n  AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript application/javascript application/json\r\n</IfModule>\r\n\r\n# Browser Caching\r\n<IfModule mod_expires.c>\r\n  ExpiresActive On\r\n  ExpiresByType image/jpg \"access plus 1 year\"\r\n  ExpiresByType image/jpeg \"access plus 1 year\"\r\n  ExpiresByType image/gif \"access plus 1 year\"\r\n  ExpiresByType image/png \"access plus 1 year\"\r\n  ExpiresByType image/svg+xml \"access plus 1 year\"\r\n  ExpiresByType text/css \"access plus 1 month\"\r\n  ExpiresByType application/javascript \"access plus 1 month\"\r\n  ExpiresByType text/javascript \"access plus 1 month\"\r\n</IfModule>\r\n```\r\n\r\n### 6. Domain-Konfiguration in Strato\r\n\r\n1. Loggen Sie sich in Ihren Strato-Kundenbereich ein\r\n2. Navigieren Sie zu \"Domains\" → \"Domain-Verwaltung\"\r\n3. Stellen Sie sicher, dass beide Domains auf das richtige Verzeichnis zeigen\r\n4. Aktivieren Sie SSL/HTTPS für beide Domains\r\n\r\n### 7. SSL-Zertifikat aktivieren\r\n\r\n1. Im Strato-Kundenbereich: \"SSL-Verwaltung\"\r\n2. \"Let's Encrypt\" Zertifikat für beide Domains aktivieren\r\n3. Warten Sie 5-10 Minuten bis das Zertifikat aktiv ist\r\n\r\n### 8. Testen\r\n\r\nBesuchen Sie:\r\n- https://gemilike.de\r\n- https://gemilike.com\r\n- https://gemilike.de/en (englische Version)\r\n- https://gemilike.de/shop\r\n- https://gemilike.de/blog\r\n- https://gemilike.de/contact\r\n- **https://gemilike.de/admin** (Admin-Panel - nur bei Node.js Hosting)\r\n\r\n## Wichtige Hinweise\r\n\r\n### Mehrsprachigkeit\r\n\r\nDie Website unterstützt automatisch DE und EN:\r\n- `gemilike.de` → Deutsche Standardversion\r\n- `gemilike.de/en` → Englische Version\r\n\r\n### E-Mail-Funktionalität\r\n\r\nDas Kontaktformular benötigt eine Server-seitige E-Mail-Lösung. Für Static Export:\r\n\r\n**Option 1: Formspree** (einfach)\r\n```typescript\r\n// In contact/page.tsx\r\nconst response = await fetch('https://formspree.io/f/YOUR_FORM_ID', {\r\n  method: 'POST',\r\n  body: JSON.stringify(formData),\r\n  headers: { 'Content-Type': 'application/json' }\r\n});\r\n```\r\n\r\n**Option 2: EmailJS** (kostenlos)\r\n1. Account bei emailjs.com erstellen\r\n2. Template einrichten\r\n3. JavaScript SDK einbinden\r\n\r\n**Option 3: Strato Mail-API** (falls verfügbar)\r\nKontaktieren Sie Strato Support für API-Zugang\r\n\r\n### Analytics einrichten\r\n\r\n1. Google Analytics Account erstellen\r\n2. Tracking-ID erhalten\r\n3. In `app/[locale]/layout.tsx` einfügen:\r\n\r\n```typescript\r\n<Script\r\n  src={`https://www.googletagmanager.com/gtag/js?id=${process.env.NEXT_PUBLIC_GA_ID}`}\r\n  strategy=\"afterInteractive\"\r\n/>\r\n```\r\n\r\n### Updates deployen\r\n\r\nBei Änderungen:\r\n```bash\r\nnpm run build\r\n# Upload des neuen out/ Ordners via FTP\r\n```\r\n\r\n## Troubleshooting\r\n\r\n### Problem: 404 Fehler bei Unterseiten\r\n\r\n**Lösung:** Überprüfen Sie die `.htaccess` Datei\r\n\r\n### Problem: Bilder werden nicht angezeigt\r\n\r\n**Lösung:** Stellen Sie sicher, dass `images.unoptimized: true` in `next.config.ts` gesetzt ist\r\n\r\n### Problem: CSS wird nicht geladen\r\n\r\n**Lösung:** Überprüfen Sie, dass alle Dateien aus `out/_next/` hochgeladen wurden\r\n\r\n### Problem: Kontaktformular funktioniert nicht\r\n\r\n**Lösung:** Static Export unterstützt keine API Routes. Nutzen Sie einen externen Service (siehe oben)\r\n\r\n### Problem: Admin-Panel funktioniert nicht\r\n\r\n**Lösung:** Admin-Panel benötigt Node.js Hosting. Wechseln Sie zu Option B (Node.js Hosting) oder nutzen Sie Static Export ohne Admin-Panel\r\n\r\n## Performance-Optimierung\r\n\r\n1. **Bilder komprimieren** vor dem Upload\r\n2. **Lazy Loading** ist bereits implementiert\r\n3. **CDN nutzen** (optional): Cloudflare vor Strato schalten\r\n\r\n## Backup\r\n\r\nErstellen Sie regelmäßig Backups:\r\n```bash\r\n# Lokales Backup\r\ntar -czf gemilike-backup-$(date +%Y%m%d).tar.gz out/\r\n\r\n# Download vom Server via FTP\r\n```\r\n\r\n## Support\r\n\r\nBei Problemen:\r\n- Strato Support: https://www.strato.de/faq/\r\n- Next.js Docs: https://nextjs.org/docs\r\n- Projekt-README: siehe README.md\r\n",
    "gemstone": "general",
    "author": "aa",
    "status": "draft",
    "imageUrl": "",
    "createdAt": "2025-10-19T23:00:14.183Z",
    "updatedAt": "2025-10-19T23:00:14.183Z"
  },
  {
    "id": "story-1760915005971-o46y02eme",
    "title": "123",
    "content": "# Changelog\n\nAlle wichtigen Änderungen an diesem Projekt werden in dieser Datei dokumentiert.\n\n---\n\n## [2.1.0] - 2025-10-10 12:00\n\n### 🎨 UI/UX Verbesserungen\n\n#### ✨ Added\n- **Header-Logo-Optimierung** - \"I\" in \"Gem I Like\" um 6px nach rechts verschoben\n- **Verbesserte Lesbarkeit** - Optimierte Schriftpositionierung im Text-Logo\n- **Konsistentes Design** - Einheitliche Abstände im Header-Logo\n\n#### 🔧 Technical\n- **CSS-Anpassungen** - Margin-left von `ml-1.5` zu `ml-3` geändert\n- **Responsive Design** - Optimierung für alle Bildschirmgrößen\n- **Accessibility** - Verbesserte Benutzerfreundlichkeit\n\n#### 📚 Documentation\n- **README.md** - E-Mail-System Features hinzugefügt\n- **PROJECT_STATUS.md** - Version auf 2.1.0 aktualisiert\n- **Alle MD-Dateien** - Konsistente Aktualisierung aller Dokumentation\n\n---\n\n## [1.2.2] - 2025-10-07 18:00\n\n### 🎉 Major Release - Admin-Panel Funktionalitäten\n\n#### ✨ Added\n- **Admin-Panel Berichte** - Vollständige Berichte-Seite mit funktionalen Buttons\n- **Admin-Panel Bestellungen** - Anzeige-Button mit Funktionalität versehen\n- **Admin-Panel Audit-Logs** - Mock-Daten und funktionale Buttons implementiert\n- **Admin-Panel Kundenverwaltung** - Mock-Daten und funktionale Buttons aktiviert\n- **CustomerDetailsModal** - Vollständige Modal-Komponente für Kunden-Details\n- **CustomerNotesModal** - Modal-Komponente für Notizen-Bearbeitung\n- **AuditLogDetailsModal** - Modal-Komponente für Audit-Log-Details\n\n#### 🔧 Technical\n- **Mock-Daten** - Realistische Test-Daten für alle Admin-Bereiche\n- **Funktionale Buttons** - Alle Buttons mit Console-Logs und Alert-Bestätigungen\n- **CSV-Export** - Export-Funktionalität für Kunden- und Audit-Daten\n- **Modal-Dialoge** - Vollständige Modal-Komponenten für Details und Bearbeitung\n\n#### 📚 Documentation\n- **CHECKLIST.md** - Admin-Panel-Funktionalitäten dokumentiert\n- **PROJECT_STATUS.md** - Aktuelle Version und Features aktualisiert\n- **FEATURES.md** - Neue Admin-Panel-Features hinzugefügt\n- **CHANGELOG.md** - Alle Änderungen dokumentiert\n\n---\n\n## [1.2.1] - 2025-10-05 23:45\n\n### 🎨 UI/UX Improvements\n\n#### ✨ Added\n- **Hero Image Management System** - Vollständiges Upload-System für Hero-Bilder\n- **Persistent Image Storage** - Bilder werden dauerhaft in `/public/uploads/hero/` gespeichert\n- **Image Upload API** - `/api/admin/hero-image` für sichere Bild-Uploads\n- **File Validation** - Automatische Validierung von Bildtyp und -größe (max. 5MB)\n\n#### 🎨 Changed\n- **Treatment Badge Color** - Orange Badge (`bg-amber-600/90`) zu neutralem Hellgrau (`bg-gray-400/90`) geändert\n- **Mobile Optimizations** - Header-Größen, Icon-Größen und Badge-Größen für mobile Geräte optimiert\n- **Footer Height Reduction** - Footer-Höhe um 25px reduziert für bessere Proportionen\n- **Shop Layout** - GemstoneCard durch kompakte Thumbnails ersetzt mit Modal-Ansicht\n\n#### 🔧 Technical\n- **HeroImageManager Component** - Erweitert um API-Integration und Validierung\n- **Upload Directory Structure** - Automatische Erstellung von Upload-Verzeichnissen\n- **Error Handling** - Robuste Fehlerbehandlung für Bild-Uploads\n- **Loading States** - UI-Feedback während Upload-Prozessen\n\n#### 📚 Documentation\n- **CHANGELOG.md** - Aktualisiert mit neuesten Änderungen\n- **CHECKLIST.md** - Mobile Optimierungen und UI-Verbesserungen dokumentiert\n- **README.md** - Hero Image Management Features hinzugefügt\n\n---\n\n## [1.2.0] - 2025-10-03 15:30\n\n### 🎉 Major Release - Admin Panel\n\n#### ✨ Added\n- **Vollständiges Admin-Panel** (`/admin`) - Grafische Benutzeroberfläche für Produktverwaltung\n- **CRUD-Operationen** - Erstellen, Bearbeiten, Löschen von Edelsteinen\n- **Drag & Drop Upload** - Bilder per Drag & Drop hochladen\n- **API-Integration** (`/api/admin/gemstones`) - REST-API für Datenpersistierung\n- **Automatische Datei-Generierung** - TypeScript-Dateien werden automatisch aktualisiert\n- **Tab-basierte Navigation** - Intuitive Formular-Struktur im Admin-Panel\n- **Vollständige Formular-Validierung** - Alle Felder mit Validierung\n- **Sofortige Vorschau** - Änderungen werden direkt angezeigt\n\n#### 🔧 Technical\n- **GemstoneEditor-Komponente** - Vollständiges Admin-Formular\n- **API-Route für Admin** - Backend für Produktverwaltung\n- **Datei-Persistierung** - Automatische Speicherung in `gemstones.ts`\n- **TypeScript-Integration** - Vollständig typisierte Admin-Funktionen\n\n#### 📚 Documentation\n- **README.md** - Vollständig aktualisiert mit Admin-Panel-Features\n- **PROJECT_STATUS.md** - Aktuelle Version und Features dokumentiert\n- **FEATURES.md** - Erweiterte Feature-Dokumentation\n- **Admin-Panel-Anleitung** - Vollständige Bedienungsanleitung\n\n---\n\n## [1.0.4] - 2025-10-01 19:30\n\n### 🎨 Changed\n- **Logo vergrößert** - 33% größer für bessere Lesbarkeit\n  - Höhe: 48px → 64px\n  - Breite: 120px → 160px\n  - Header-Höhe: 64px → 80px\n  \n### 🎨 Added\n- **Gemilike-Schriftart** CSS-Klassen erstellt\n  - `.gemilike-text` - Mit Cyan-Outline wie im Logo\n  - `.gemilike-text-gradient` - Mit Feuer-zu-Eis Gradient\n  - Impact/Arial Black Font, 900 weight, uppercase\n  \n### 🎨 Changed\n- **Homepage Hero-Titel** verwendet jetzt Logo-Schriftart\n- **Footer Brand** verwendet jetzt Logo-Schriftart\n- **Tagline** geändert zu \"Heroes in Gems\"\n\n### 📚 Added\n- **LOGO_STYLING.md** - Dokumentation der Logo-Styling Änderungen\n\n---\n\n## [1.0.3] - 2025-10-01 19:25\n\n### 🌍 Fixed\n- **Homepage-Übersetzung implementiert**\n  - Alle Texte verwenden jetzt Übersetzungsfunktion\n  - `getTranslations` statt `useTranslations` für async Server Components\n  - DE/EN Sprachumschaltung funktioniert vollständig auf Homepage\n  \n### 📚 Added\n- Erweiterte Übersetzungen in `messages/de.json` und `messages/en.json`\n- `home.*` Keys für alle Homepage-Texte\n- **TRANSLATION_FIX.md** - Dokumentation der Übersetzungs-Implementierung\n\n---\n\n## [1.0.2] - 2025-10-01 19:15\n\n### 🎨 Added\n- **Logo integriert** - fulllogo_transparent.png aus Logo-Ordner\n  - Im Header mit Next.js Image-Komponente\n  - Responsive und optimiert\n  - Priority Loading für Performance\n  \n### 🎨 Changed\n- **Farbschema angepasst** an Logo-Farben\n  - Primary: Orange-Rot (#FF6B35) - Feuer-Theme\n  - Secondary: Cyan (#00BCD4) - Eis-Theme\n  - Accent: Gold/Gelb (#FFC107) - Highlights\n  - Dark Mode Varianten hinzugefügt\n  - Alle UI-Komponenten nutzen neue Farben\n\n### 📚 Added\n- **BRANDING_APPLIED.md** - Dokumentation der Branding-Integration\n\n---\n\n## [1.0.1] - 2025-10-01 18:58\n\n### 🐛 Fixed\n- **Hydration Mismatch Error behoben**\n  - Cookie-Banner verwendet jetzt `mounted` State\n  - Warenkorb-Badge im Header zeigt erst nach Client-Mount\n  - Verhindert SSR/Client Rendering Unterschiede\n  - Dateien: `components/layout/CookieBanner.tsx`, `components/layout/Header.tsx`\n\n### 📚 Added\n- **TROUBLESHOOTING.md** erstellt mit Lösungen für häufige Probleme\n- Dokumentation für Hydration Errors\n- Pattern für Client-Only Components\n\n---\n\n## [1.0.0] - 2025-10-01\n\n### 🎉 Initial Release\n\n#### ✨ Features\n- Vollständige Next.js 15 Website mit TypeScript\n- Mehrsprachigkeit (Deutsch/Englisch) mit next-intl\n- Responsive Design mit Tailwind CSS v4\n- shadcn/ui Komponenten-Bibliothek\n- Blog-System (Übersicht)\n- E-Commerce Shop mit Warenkorb\n- Kontaktformular mit API-Route\n- Newsletter-API\n- Cookie-Banner (DSGVO-konform)\n\n#### 📄 Seiten\n- Homepage mit Hero-Section, Features, CTAs\n- Über uns\n- Leistungen (6 Service-Kategorien)\n- Blog-Übersicht\n- Shop mit Produktkatalog\n- Warenkorb\n- Kontaktformular\n\n#### 🎨 Design\n- Modernes, minimalistisches Design\n- Gradient-Effekte\n- Smooth Animations\n- Mobile-First Approach\n- Dark Mode vorbereitet\n\n#### 🛠️ Technologie\n- Next.js 15 (App Router)\n- TypeScript\n- Tailwind CSS v4\n- shadcn/ui\n- next-intl\n- Zustand (State Management)\n- Lucide React (Icons)\n\n#### 📚 Dokumentation\n- README.md - Vollständige Projektdokumentation\n- START_HERE.md - Einstiegspunkt\n- QUICK_START.md - Schnelleinstieg\n- NEXT_STEPS.md - Anpassungen & Erweiterungen\n- DEPLOYMENT.md - Strato-Deployment Anleitung\n- CHECKLIST.md - Go-Live Checkliste\n- PROJECT_STATUS.md - Projektstatus\n- ROUTES.md - Routen-Übersicht\n- TROUBLESHOOTING.md - Problemlösungen\n\n---\n\n## Versionsformat\n\nDieses Projekt folgt [Semantic Versioning](https://semver.org/):\n- **MAJOR**: Inkompatible API-Änderungen\n- **MINOR**: Neue Features (rückwärtskompatibel)\n- **PATCH**: Bugfixes (rückwärtskompatibel)\n\n---\n\n## Geplante Features\n\n### Version 1.1.0 (geplant)\n- [ ] Blog-Einzelartikel-Seiten\n- [ ] Produktdetail-Seiten\n- [ ] Checkout-Prozess\n- [ ] Payment-Integration (Stripe/PayPal)\n- [ ] Impressum, Datenschutz, AGB Seiten\n- [ ] Sitemap-Generator\n- [ ] SEO-Optimierungen\n\n### Version 1.2.0 (geplant)\n- [ ] Newsletter-Integration (Mailchimp/SendGrid)\n- [ ] Blog-Kommentare\n- [ ] Produktbewertungen\n- [ ] Erweiterte Suche\n- [ ] Wishlist-Funktionalität\n\n### Version 2.0.0 (geplant)\n- [ ] User-Authentifizierung\n- [ ] User-Dashboard\n- [ ] Bestellhistorie\n- [ ] Admin-Panel\n- [ ] CMS-Integration\n\n---\n\n**Letzte Aktualisierung:** 07.10.2025 18:00 Uhr\n",
    "gemstone": "general",
    "author": "8",
    "status": "draft",
    "imageUrl": "/uploads/DE_02563.JPG",
    "createdAt": "2025-10-19T23:03:25.971Z",
    "updatedAt": "2025-10-19T23:03:25.971Z"
  }
]